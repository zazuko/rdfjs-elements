{
  "version": "experimental",
  "tags": [
    {
      "name": "rdf-snippet",
      "path": "./rdf-snippet.js",
      "description": "An RDF viewer which allows switching between various serializations.\n\n## Default usage\n\nThe initial text of the RDF snippet must be added inside a child `<script>` element with `type` attribute set to the appropriate\nRDF media type. The element's `formats` property selects the media types which should be available as alternative serializations.\n\n```html\n<rdf-snippet formats=\"application/ld+json,application/n-quads\">\n   <script type=\"text/turtle\">\n＠base <http://example.com/> .\n＠prefix schema: <http://schema.org/> .\n\n<john> a schema:Person ;\n   schema:name \"John Doe\" .\n   </script>\n</rdf-snippet>\n```\n\nThe initial RDF representation remains unchanged, while selecting the output formats re-serializes the actual triples and presents the output.\n\n## Usage with properties\n\nIn case when a `<script>` cannot be used, the snippet can be initialized by passing the serialized input and input format using properties/attributes\n\n```html\n<rdf-snippet .input=\"${turtle}\" input-format=\"text/turtle\">\n</rdf-snippet>\n```\n\n## Supported types\n\nOut of the box all common RDF formats are supported, where some can only be used for the input (no serializer available):\n\n- JSON-LD\n- N-Triples\n- N-Quads\n- Turtle/N3\n- TriG *(input only)*\n- RDF/XML *(input only)*\n\nSupport for additional types can be added by registering an RDF/JS-compliant parser and/or serializer using the [`@rdf-esm/formats-common`](https://npm.im/@rdf-esm/formats-common)\npackage:\n\n```js\nimport { parsers, serializers } from '@rdf-esm/formats-common'\n\n// by importing dynamically, the code will only be loaded when needed\nparsers.set('application/trix', async () => {\n   const TrixParser = await import('@hypothetical/trix-parser')\n   return new TrixParser()\n})\n\nserializers.set('application/trix', async () => {\n   const TrixSerializer = await import('@hypothetical/trix-serializer')\n   return new TrixSerializer()\n})\n```",
      "attributes": [
        {
          "name": "layout",
          "description": "controls the position of selection buttons",
          "type": "\"vertical\"|\"horizontal\""
        },
        {
          "name": "formats",
          "description": "comma-separated list of output formats",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "prefixes",
          "description": "a comma-separated list of prefixes to use for serializing. Always includes `rdf`, `rdfs` and `xsd` Any prefix included in the [`@zazuko/rdf-vocabularies` package](https://github.com/zazuko/rdf-vocabularies/tree/master/ontologies) can be used",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "input-format",
          "description": "set the format of the input (ignored when `<script>` is used)",
          "type": "string",
          "default": "\"text/turtle\""
        }
      ],
      "properties": [
        {
          "name": "input",
          "description": "set the input serialized value (ignored when `<script>` is used)",
          "type": "string"
        },
        {
          "name": "selectedFormat",
          "description": "gets the selected output format",
          "type": "string"
        },
        {
          "name": "layout",
          "attribute": "layout",
          "description": "controls the position of selection buttons",
          "type": "\"vertical\"|\"horizontal\""
        },
        {
          "name": "value",
          "description": "Gets the text contents of the currently showing editor",
          "type": "string"
        },
        {
          "name": "formats",
          "attribute": "formats",
          "description": "comma-separated list of output formats",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "prefixes",
          "attribute": "prefixes",
          "description": "a comma-separated list of prefixes to use for serializing. Always includes `rdf`, `rdfs` and `xsd` Any prefix included in the [`@zazuko/rdf-vocabularies` package](https://github.com/zazuko/rdf-vocabularies/tree/master/ontologies) can be used",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "inputFormat",
          "attribute": "input-format",
          "description": "set the format of the input (ignored when `<script>` is used)",
          "type": "string",
          "default": "\"text/turtle\""
        }
      ],
      "events": [
        {
          "name": "value-changed"
        }
      ],
      "cssParts": [
        {
          "name": "format",
          "description": "every format selection button"
        },
        {
          "name": "input",
          "description": "selection button for the input format"
        },
        {
          "name": "output",
          "description": "selection button for the output formats"
        },
        {
          "name": "selected",
          "description": "the currently selected format button"
        }
      ]
    }
  ]
}